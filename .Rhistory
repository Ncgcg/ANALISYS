summary(aov(data = pcadata, PC3 ~ group))
summary(aov(data = pcadata, PC4 ~ group))
pcadata |> wilcox_test(PC2 ~ group)
View(dt)
### MERGE
dt <- list()
for (i in 1:length(data)){
dt[[i]] <- data[[i]] |> select(name, group, ddc)
colnames(dt[[i]]) <- c('name', 'group', names(data)[i])
}
dt|> reduce(full_join, by = c('name', 'group')) |>
ungroup() -> dt
### CORRELATIONS
GGally::ggpairs(dt[3:12])
# COMPLETE ----
## UPLOAD
data <- list.files(pattern = "*.csv", full.names = F) |>
lapply(read_csv) |> array(dimnames = list(
matrix.names = c("AMPH", "BIN", "CR16", "NWASP", "TBP",
"TKS4", "TKS4b", "TKS4L", "TKS5L", "TTP", "WIP")))
## PRE ANALYSIS
for (i in 1:length(data)){
data[[i]]$session <- as.factor(data[[i]]$session)
data[[i]] |> filter(Cq > 0) |> group_by(name, session) |>
summarise(group = unique(group), Cq = mean(Cq),
session = unique(session), eff = mean(eff),
threshold = mean(threshold)) -> data[[i]]
}
### N0
for (i in 1:length(data)){
data[[i]]$N0 <- data[[i]]$threshold/(data[[i]]$eff)^data[[i]]$Cq
}
### N0 OUTLIERS
for (i in 1:length(data)){
quartiles <- quantile(data[[i]]$N0, probs=c(.25, .75), na.rm = FALSE)
IQR <- IQR(data[[i]]$N0)
Lower <- quartiles[1] - 1.5*IQR
Upper <- quartiles[2] + 1.5*IQR
data[[i]] <- subset(data[[i]], data[[i]]$N0 > Lower & data[[i]]$N0 < Upper)
}
for (i in 1:length(data)){
data[[i]] |> group_by(name) |>
summarise(group = unique(group), N0 = mean(N0)) -> data[[i]]
}
## NORMALIZATION
data[12] <- data[5]
for (i in 1:length(data)){
#colnames(data[[i]]) <- c('name', 'group', names(data)[i])
list(data[[12]], data[[i]])|> reduce(full_join, by = c('name', 'group')) |>
ungroup() |> drop_na(N0.x, N0.y) -> data[[i]]
}
data <- data[-c(5, 12)]
### NORMALIZED EXPRESSION
for (i in 1:length(data)){
data[[i]]$dc <- log10(data[[i]]$N0.y/data[[i]]$N0.x)
}
### OUTLIERS
for (i in 1:length(data)){
quartiles <- quantile(data[[i]]$ddc, probs=c(.25, .75), na.rm = FALSE)
IQR <- IQR(data[[i]]$ddc)
Lower <- quartiles[1] - 1.5*IQR
Upper <- quartiles[2] + 1.5*IQR
data[[i]] <- subset(data[[i]], data[[i]]$ddc > Lower & data[[i]]$ddc < Upper)
}
### OUTLIERS
for (i in 1:length(data)){
quartiles <- quantile(data[[i]]$dc, probs=c(.25, .75), na.rm = FALSE)
IQR <- IQR(data[[i]]$dc)
Lower <- quartiles[1] - 1.5*IQR
Upper <- quartiles[2] + 1.5*IQR
data[[i]] <- subset(data[[i]], data[[i]]$dc > Lower & data[[i]]$dc < Upper)
}
### PREVIEW
for (i in 1:length(data)){
print(ggplot(data[[i]], aes(x = group, y = dc))+
geom_boxplot()+
labs(title = names(data)[[i]], x = 'group', y = 'FC'))
}
### NORMALITY
shapiro <- function(tib){
groups <- c('Adjacent', 'Luminal A', 'Luminal B HER-',
'Luminal B HER+', 'HER-Enriched', 'Triple Negative')
for(i in groups){
print(i)
print(tib |> filter(group == i) |> ungroup() |> shapiro_test(dc))
}
}
for (i in 1:length(data)){
print(names(data)[[i]])
shapiro(data[[i]])
}
### TESTS
for (i in 1:length(data)){
print(names(data)[i])
print(summary(aov(data = data[[i]], dc ~ group)))
}
for (i in 1:length(data)){
print(names(data)[i])
data[[i]] |> wilcox_test(dc ~ group) |> print()
}
### SCALING
for (i in 1:length(data)){
data[[i]]$ddc <- scale(data[[i]]$dc)
}
### PREVIEW
for (i in 1:length(data)){
print(ggplot(data[[i]], aes(x = group, y = ddc))+
geom_boxplot()+
labs(title = names(data)[[i]], x = 'group', y = 'Scaled log10(FC)'))
}
### TESTS
for (i in 1:length(data)){
print(names(data)[i])
print(summary(aov(data = data[[i]], dc ~ group)))
print(summary(aov(data = data[[i]], ddc ~ group)))
}
for (i in 1:length(data)){
print(names(data)[i])
data[[i]] |> wilcox_test(dc ~ group) |> print()
data[[i]] |> wilcox_test(ddc ~ group) |> print()
}
var(data[[1]]$dc)
### SCALING
for (i in 1:length(data)){
data[[i]] |> filter(group == 'Adjacent') |> select (dc) |> drop_na() |> as.list() |> lapply(median) -> m
data[[i]]$ddc <- data[[i]]$dc - m[[1]]
}
### PREVIEW
for (i in 1:length(data)){
print(ggplot(data[[i]], aes(x = group, y = ddc))+
geom_boxplot()+
labs(title = names(data)[[i]], x = 'group', y = 'Scaled log10(NE)'))
}
### TESTS
for (i in 1:length(data)){
print(names(data)[i])
print(summary(aov(data = data[[i]], dc ~ group)))
print(summary(aov(data = data[[i]], ddc ~ group)))
}
### MERGE
dt <- list()
for (i in 1:length(data)){
dt[[i]] <- data[[i]] |> select(name, group, ddc)
colnames(dt[[i]]) <- c('name', 'group', names(data)[i])
}
dt|> reduce(full_join, by = c('name', 'group')) |>
ungroup() -> dt
### CORRELATIONS
GGally::ggpairs(dt[3:12])
###
summary(aov(data = dt, TKS4 ~ TKS4L+TKS4b))
View(dt)
###
summary(aov(data = dt, BIN - NWASP ~ groupb))
### BIN NWASP
lm(dt, BIN ~ NWASP)
### BIN NWASP
lm(dt, formula = BIN ~ NWASP)
dt$BN <- BIN - 0.22821*NWASP
dt$BN <- dt$BIN - 0.22821*dt$NWASP
summary(aov(data = dt, BN ~ group))
### BIN NWASP
lm(data = dt, BIN ~ WIP)
dt$BN <- dt$BIN - 0.317*dt$WIP
summary(aov(data = dt, BN ~ group))
### BIN NWASP
lm(data = dt, TKS4L ~ TKS4b)
dt$BN <- dt$TKS4L - dt$TKS4b
summary(aov(data = dt, BN ~ group))
View(dt)
### DIM RED
dt[-c(7, 8)] |> drop_na() -> X
### DIM RED
dt[-c(7, 8, 11)] |> drop_na() -> X
pca <- prcomp(X[, 3:10], scale. = T, center = T)
tsne <- Rtsne::Rtsne(X[, 3:10], perplexity = 10)
tsne <- Rtsne::Rtsne(X[, 3:10], perplexity = 5)
tsne <- Rtsne::Rtsne(X[, 3:10], perplexity = 3)
pcadata <- cbind(X[, 1:2], pca$x)
tsnedata <- data.frame(X[,1:2],
x = tsne$Y[,1],
y = tsne$Y[,2])
ggplot(pcadata, aes(col = group))+
geom_point(aes(x=PC1, y = PC2))
ggplot(tsnedata, aes(col = group))+
geom_point(aes(x=x,y=y))
### TESTS
for (i in 1:length(data)){
print(names(data)[i])
print(summary(aov(data = data[[i]], ddc ~ group)))
}
### DIM RED
dt[-c(7, 8, 9, 11)] |> drop_na() -> X
### PREVIEW
for (i in 1:length(data)){
print(ggplot(data[[i]], aes(x = group, y = ddc))+
geom_boxplot()+
labs(title = names(data)[[i]], x = 'group', y = 'Scaled log10(NE)'))
}
### TESTS
for (i in 1:length(data)){
print(names(data)[i])
print(summary(aov(data = data[[i]], ddc ~ group)))
}
summary(aov(data = dt, BN ~ group))
### BIN NWASP
lm(data = dt, TKS4 ~ TKS4L + TKS4b)
dt$BN <- dt$TKS4 - 0.25*dt$TKS4L
summary(aov(data = dt, BN ~ group))
dt$BN <- dt$TKS4 - 0.25*dt$TKS4L - 0.004*TKS4b
dt$BN <- dt$TKS4 - 0.25*dt$TKS4L - 0.004*dt$TKS4b
summary(aov(data = dt, BN ~ group))
### DIM RED
dt[-c(7, 8, 9, 10, 11)] |> drop_na() -> X
### DIM RED
dt[-c(7, 8, 9, 10, 11, 13)] |> drop_na() -> X
pca <- prcomp(X[, 3:7], scale. = T, center = T)
tsne <- Rtsne::Rtsne(X[, 3:7], perplexity = 3)
pcadata <- cbind(X[, 1:2], pca$x)
tsnedata <- data.frame(X[,1:2],
x = tsne$Y[,1],
y = tsne$Y[,2])
ggplot(pcadata, aes(col = group))+
geom_point(aes(x=PC1, y = PC2))
ggplot(tsnedata, aes(col = group))+
geom_point(aes(x=x,y=y))
tsne <- Rtsne::Rtsne(X[, 3:7], perplexity = 5)
tsnedata <- data.frame(X[,1:2],
x = tsne$Y[,1],
y = tsne$Y[,2])
ggplot(tsnedata, aes(col = group))+
geom_point(aes(x=x,y=y))
### DIM RED
dt[-c(7, 8, 9, 11, 13)] |> drop_na() -> X
pca <- prcomp(X[, 3:length(X)], scale. = T, center = T)
tsne <- Rtsne::Rtsne(X[, 3:length(X)], perplexity = 5)
pcadata <- cbind(X[, 1:2], pca$x)
tsnedata <- data.frame(X[,1:2],
x = tsne$Y[,1],
y = tsne$Y[,2])
ggplot(pcadata, aes(col = group))+
geom_point(aes(x=PC1, y = PC2))
ggplot(tsnedata, aes(col = group))+
geom_point(aes(x=x,y=y))
### DIM RED
dt[-c(4, 7, 8, 11, 13)] |> drop_na() -> X
pca <- prcomp(X[, 3:length(X)], scale. = T, center = T)
tsne <- Rtsne::Rtsne(X[, 3:length(X)], perplexity = 5)
pcadata <- cbind(X[, 1:2], pca$x)
tsnedata <- data.frame(X[,1:2],
x = tsne$Y[,1],
y = tsne$Y[,2])
ggplot(pcadata, aes(col = group))+
geom_point(aes(x=PC1, y = PC2))
ggplot(tsnedata, aes(col = group))+
geom_point(aes(x=x,y=y))
tsne <- Rtsne::Rtsne(X[, 3:length(X)], perplexity = 5)
tsnedata <- data.frame(X[,1:2],
x = tsne$Y[,1],
y = tsne$Y[,2])
ggplot(tsnedata, aes(col = group))+
geom_point(aes(x=x,y=y))
tsne <- Rtsne::Rtsne(X[, 3:length(X)], perplexity = 5)
tsnedata <- data.frame(X[,1:2],
x = tsne$Y[,1],
y = tsne$Y[,2])
ggplot(tsnedata, aes(col = group))+
geom_point(aes(x=x,y=y))
### HOMOGENEITY
for (i in 1:length(data)){
print(names(data)[[i]])
levene_test(data[[i]], dc ~ group)
}
### HOMOGENEITY
for (i in 1:length(data)){
print(names(data)[[i]])
levene_test(data = data[[i]], dc ~ group)
}
### HOMOGENEITY
for (i in 1:length(data)){
print(names(data)[[i]])
levene_test(data = data[[i]], dc ~ group) |> print()
}
### SCALING
for (i in 1:length(data)){
data[[i]] |> filter(group == 'Adjacent') |> select (dc) |> drop_na() |> as.list() |> lapply(median) -> m
data[[i]]$ddc <- data[[i]]$dc - m[[1]]
}
aov(data = data[[1]], ddc ~ group) |> multcomp::glht() |> print()
aov(data = data[[i]], ddc ~ group) |> multcomp::glht(linfct = mcp(group = "Tukey")) |> print()
aov(data = data[[i]], ddc ~ group) |> multcomp::glht(linfct = multcomp::mcp(group = "Tukey")) |> print()
anova_test(data[[1]], ddc ~ group)
anova_test(data[[1]], ddc ~ group) |>  summary()
### TESTS
for (i in 1:length(data)){
names(data)[i] |> print()
anova_test(data[[i]], ddc ~ group) |> print()
}
data[[1]] |> group_by(group) |> identify_outliers()
data[[1]] |> group_by(group) |> identify_outliers(ddc)
for (i in 1:length(data)){
data[[i]] |> group_by(group) |> identify_outliers(ddc)
}
for (i in 1:length(data)){
data[[i]] |> group_by(group) |> identify_outliers(ddc) |> print()
}
for (i in 1:length(data)){
names(data)[i] |> print()
data[[i]] |> tukey_hsd(ddc ~ group) |> print()
}
### PLOTTING
for (i in 1:length(data)){
ano <- data[[i]] |> tukey_hsd(ddc ~ group) |> add_xy_position(x = "group")
ggboxplot(data[[i]], x = "group", y = 'log10(FC)') +
stat_pvalue_manual(ano, hide.ns = TRUE) +
labs(
caption = get_pwc_label(ano)
)
}
?ggboxplot
### PLOTTING
for (i in 1:length(data)){
ano <- data[[i]] |> tukey_hsd(ddc ~ group) |> add_xy_position(x = "group")
ggpubr::ggboxplot(data[[i]], x = "group", y = 'log10(FC)') +
stat_pvalue_manual(ano, hide.ns = TRUE) +
labs(
caption = get_pwc_label(ano)
)
}
### PLOTTING
for (i in 1:length(data)){
ano <- data[[i]] |> tukey_hsd(ddc ~ group) |> add_xy_position(x = "group")
ggpubr::ggboxplot(data[[i]], x = "group", y = 'log10(FC)') +
ggpubr::stat_pvalue_manual(ano, hide.ns = TRUE) +
labs(
caption = get_pwc_label(ano)
)
}
### PLOTTING
for (i in 1:length(data)){
ano <- data[[i]] |> tukey_hsd(ddc ~ group) |> add_xy_position(x = "group")
ggpubr::ggboxplot(data[[i]], x = "group", y = 'log10(FC)') +
ggpubr::stat_pvalue_manual(ano, hide.ns = TRUE) +
labs(caption = get_pwc_label(ano)) |>
print()
}
### PLOTTING
for (i in 1:length(data)){
ano <- data[[i]] |> tukey_hsd(ddc ~ group) |> add_xy_position(x = "group")
print(ggpubr::ggboxplot(data[[i]], x = "group", y = 'log10(FC)') +
ggpubr::stat_pvalue_manual(ano, hide.ns = TRUE) +
labs(caption = get_pwc_label(ano)))
}
### PLOTTING
for (i in 1:length(data)){
ano <- data[[i]] |> tukey_hsd(ddc ~ group) |> add_xy_position(x = "group")
print(ggpubr::ggboxplot(data[[i]], x = "group", y = 'ddc') +
ggpubr::stat_pvalue_manual(ano, hide.ns = TRUE) +
labs(caption = get_pwc_label(ano)))
}
install.packages("WRS2")
data[[1]] |> WRS2::Qanova(ddc ~ group)
data[[1]] |> WRS2::Qanova(formula = ddc ~ group)
### TESTS
for (i in 1:length(data)){
names(data)[i] |> print()
data[[i]] |> anova_test(ddc ~ group) |> print()
data[[i]] |> WRS2::Qanova(formula = ddc ~ group) |> print()
}
WRS2::pball(dt$BIN, dt$WIP)
WRS2::pbсщк(dt$BIN, dt$WIP)
WRS2::pbcor(dt$BIN, dt$WIP)
### CORRELATIONS
GGally::ggpairs(dt[3:12])
WRS2::pbcor(dt$TKS4L, dt$TKS4b)
for (i in 1:length(data)){
names(data)[i] |> print()
data[[i]] |> tukey_hsd(ddc ~ group) |> print()
}
data[[1]]
# COMPLETE ----
## UPLOAD
data <- list.files(pattern = "*.csv", full.names = F) |>
lapply(read_csv) |> array(dimnames = list(
matrix.names = c("AMPH", "BIN", "CR16", "NWASP", "TBP",
"TKS4", "TKS4b", "TKS4L", "TKS5L", "TTP", "WIP")))
## PRE ANALYSIS
for (i in 1:length(data)){
data[[i]]$session <- as.factor(data[[i]]$session)
data[[i]]$group <- as.factor(data[[i]]$group)
data[[i]] |> filter(Cq > 0) |> group_by(name, session) |>
summarise(group = unique(group), Cq = mean(Cq),
session = unique(session), eff = mean(eff),
threshold = mean(threshold)) -> data[[i]]
}
data[[1]]
### N0
for (i in 1:length(data)){
data[[i]]$N0 <- data[[i]]$threshold/(data[[i]]$eff)^data[[i]]$Cq
}
### N0 OUTLIERS
for (i in 1:length(data)){
quartiles <- quantile(data[[i]]$N0, probs=c(.25, .75), na.rm = FALSE)
IQR <- IQR(data[[i]]$N0)
Lower <- quartiles[1] - 1.5*IQR
Upper <- quartiles[2] + 1.5*IQR
data[[i]] <- subset(data[[i]], data[[i]]$N0 > Lower & data[[i]]$N0 < Upper)
}
for (i in 1:length(data)){
data[[i]] |> group_by(name) |>
summarise(group = unique(group), N0 = mean(N0)) -> data[[i]]
}
## NORMALIZATION
data[12] <- data[5]
for (i in 1:length(data)){
list(data[[12]], data[[i]])|> reduce(full_join, by = c('name', 'group')) |>
ungroup() |> drop_na(N0.x, N0.y) -> data[[i]]
}
data <- data[-c(5, 12)]
### NORMALIZED EXPRESSION
for (i in 1:length(data)){
data[[i]]$dc <- log10(data[[i]]$N0.y/data[[i]]$N0.x)
}
### OUTLIERS
for (i in 1:length(data)){
quartiles <- quantile(data[[i]]$dc, probs=c(.25, .75), na.rm = FALSE)
IQR <- IQR(data[[i]]$dc)
Lower <- quartiles[1] - 1.5*IQR
Upper <- quartiles[2] + 1.5*IQR
data[[i]] <- subset(data[[i]], data[[i]]$dc > Lower & data[[i]]$dc < Upper)
}
### SCALING
for (i in 1:length(data)){
data[[i]] |> filter(group == 'Adjacent') |> select (dc) |> drop_na() |>
as.list() |> lapply(median) -> m
data[[i]]$ddc <- data[[i]]$dc - m[[1]]
}
for (i in 1:length(data)){
names(data)[i] |> print()
data[[i]] |> tukey_hsd(ddc ~ group) |> print()
}
for (i in 1:length(data)){
names(data)[i] |> print()
data[[i]] |> tukey_hsd(ddc ~ group) |> print()
data[[i]] |> wilcox_test(ddc ~ group) |> print()
}
data[[1]]
for (i in 1:length(data)){
print(names(data)[i])
data[[i]] |> wilcox_test(ddc ~ group) |> print()
}
data[[2]] |> wilcox_test(ddc ~ group) |> print()
data[[3]] |> wilcox_test(ddc ~ group) |> print()
data[[4]] |> wilcox_test(ddc ~ group) |> print()
data[[4]] |> wilcox_test(formula = ddc ~ group) |> print()
wilcox_test(data[[4]], ddc ~ group)
### PLOTTING
for (i in 1:length(data)){
print(ggplot(data[[i]], aes(x = group, y = ddc))+
geom_boxplot()+
labs(title = names(data)[i], x = 'group', y = 'log10(FC)'))
}
### MERGE
dt <- list()
for (i in 1:length(data)){
dt[[i]] <- data[[i]] |> select(name, group, ddc)
colnames(dt[[i]]) <- c('name', 'group', names(data)[i])
}
dt|> reduce(full_join, by = c('name', 'group')) |>
ungroup() -> dt
View(dt)
for (i in 1:length(data)){
names(data)[[i]] |> print()
data[[i]] |> group_by(group) |> summarise(n=n())
}
for (i in 1:length(data)){
names(data)[[i]] |> print()
data[[i]] |> group_by(group) |> summarise(n=n()) |> print()
}
data[[1]] |> wilcox_test(ddc ~ group) |> print()
data[[1]] |> ungroup() |> wilcox_test(ddc ~ group) |> print()
data[[1]] |> wilcox_test(formula = ddc ~ group) |> print()
data[[1]]
wilcox_test(data[[1]], ddc ~ group)
wilcox_test(data[[1]], group ~ ddc)
wilcox_test(data[1], ddc ~ group)
data[[i]] |> ungroup() |> wilcox_test(ddc ~ group) |> print()
for (i in 1:length(data)){
names(data)[i] |> print()
data[[i]] |> ungroup() |> wilcox_test(dc ~ group) |> print()
}
## TESTS
for (i in 1:length(data)){
names(data)[i] |> print()
data[[i]] |> anova_test(ddc ~ group) |> print()
#data[[i]] |> WRS2::Qanova(formula = ddc ~ group) |> print()
}
data[[1]]
for (i in 1:length(data)){
names(data)[i] |> print()
data[[i]] |> ungroup() |> wilcox_test(dc ~ as.character(group)) |> print()
}
for (i in 1:length(data)){
names(data)[i] |> print()
wdata <- data[[i]]
wdata$group <- as.character(wdata$group)
wdata |> wilcox_test(ddc ~ group) |> print()
}
for (i in 1:length(data)){
names(data)[i] |> print()
data[[i]] |> tukey_hsd(ddc ~ group) |> print()
}
